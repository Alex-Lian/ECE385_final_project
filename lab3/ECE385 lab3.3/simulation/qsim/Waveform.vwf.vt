// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2020 02:20:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          controlunit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlunit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C0;
reg C1;
reg Execute;
reg Q;
// wires                                               
wire C0plus;
wire C1plus;
wire Qplus;
wire Shift;

// assign statements (if any)                          
controlunit i1 (
// port map - connection between master ports and signals/registers   
	.C0(C0),
	.C0plus(C0plus),
	.C1(C1),
	.C1plus(C1plus),
	.Execute(Execute),
	.Q(Q),
	.Qplus(Qplus),
	.Shift(Shift)
);
initial 
begin 
#1000000 $finish;
end 

// Execute
initial
begin
	Execute = 1'b0;
	Execute = #150000 1'b1;
	Execute = #280000 1'b0;
end 

// Q
initial
begin
	Q = 1'b0;
	Q = #40000 1'b1;
	Q = #90000 1'b0;
	Q = #50000 1'b1;
	Q = #250000 1'b0;
end 

// C1
initial
begin
	C1 = 1'b0;
	C1 = #80000 1'b1;
	C1 = #20000 1'b0;
	C1 = #10000 1'b1;
	C1 = #20000 1'b0;
	C1 = #120000 1'b1;
	C1 = #40000 1'b0;
	C1 = #30000 1'b1;
	C1 = #60000 1'b0;
end 

// C0
initial
begin
	C0 = 1'b0;
	C0 = #60000 1'b1;
	C0 = #20000 1'b0;
	C0 = #30000 1'b1;
	C0 = #20000 1'b0;
	C0 = #80000 1'b1;
	C0 = #30000 1'b0;
	C0 = #80000 1'b1;
	C0 = #60000 1'b0;
end 
endmodule

